// ============================================================================
// COMPILER - THE FRIEND OF ALL
// AI Chatbot for StudyBuddy - SRM University
// ============================================================================

// FILE 1: chatbot.html (Add this file to your project root)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Compiler - the friend of all</title>
    <style>
        :root {
            --color-text: #13343b;
            --color-text-secondary: #62706e;
            --color-primary: #218cad;
            --color-primary-hover: #1b7b97;
            --color-border: rgba(94,82,64,0.2);
            --color-surface: #fff;
            --bg: #f6f8fa;
        }
        
        body {
            margin: 0;
            font-family: Inter, system-ui, Arial, sans-serif;
            background: var(--bg);
            color: var(--color-text);
        }
        
        .container {
            max-width: 960px;
            margin: 0 auto;
            padding: 16px;
        }
        
        .chat-card {
            background: #fff;
            border: 1px solid var(--color-border);
            border-radius: 16px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.06);
            overflow: hidden;
            height: 80vh;
            display: flex;
            flex-direction: column;
        }
        
        .header {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 16px 20px;
            background: linear-gradient(135deg, var(--color-primary), var(--color-primary-hover));
            color: #fff;
        }
        
        .bot-avatar {
            width: 44px;
            height: 44px;
            border-radius: 50%;
            background: rgba(255,255,255,0.15);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 22px;
        }
        
        .title {
            margin: 0;
            font-weight: 700;
            font-size: 16px;
        }
        
        .subtitle {
            margin: 2px 0 0 0;
            opacity: .9;
            font-size: 13px;
        }
        
        .messages {
            flex: 1;
            overflow-y: auto;
            padding: 16px;
            background: #f8fafb;
        }
        
        .msg {
            display: flex;
            margin-bottom: 12px;
        }
        
        .msg .bubble {
            max-width: 720px;
            padding: 12px 14px;
            border-radius: 14px;
            font-size: 14px;
            line-height: 1.5;
        }
        
        .msg.bot {
            justify-content: flex-start;
        }
        
        .msg.user {
            justify-content: flex-end;
        }
        
        .msg.bot .bubble {
            background: #fff;
            border: 1px solid var(--color-border);
            border-bottom-left-radius: 6px;
        }
        
        .msg.user .bubble {
            background: var(--color-primary);
            color: #fff;
            border-bottom-right-radius: 6px;
        }
        
        .typing {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 12px;
            background: #fff;
            border: 1px solid var(--color-border);
            border-radius: 14px;
            border-bottom-left-radius: 6px;
            width: max-content;
        }
        
        .dots {
            display: flex;
            gap: 4px;
        }
        
        .dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: var(--color-primary);
            animation: blink 1.2s infinite ease-in-out;
        }
        
        .dot:nth-child(2) {
            animation-delay: .2s;
        }
        
        .dot:nth-child(3) {
            animation-delay: .4s;
        }
        
        @keyframes blink {
            0%, 80%, 100% {
                opacity: .4;
                transform: translateY(0);
            }
            40% {
                opacity: 1;
                transform: translateY(-2px);
            }
        }
        
        .quick {
            padding: 10px 16px;
            background: #fff;
            border-top: 1px solid var(--color-border);
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }
        
        .qbtn {
            background: #fff;
            border: 1px solid var(--color-border);
            color: var(--color-text);
            padding: 8px 12px;
            border-radius: 18px;
            font-size: 13px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .qbtn:hover {
            background: var(--color-primary);
            color: #fff;
            border-color: var(--color-primary);
        }
        
        .input {
            padding: 12px 16px;
            background: #fff;
            border-top: 1px solid var(--color-border);
            display: flex;
            gap: 8px;
        }
        
        .textbox {
            flex: 1;
            padding: 10px 12px;
            border: 1px solid var(--color-border);
            border-radius: 24px;
            outline: none;
            font-size: 14px;
        }
        
        .textbox:focus {
            border-color: var(--color-primary);
            box-shadow: 0 0 0 3px rgba(33,140,173,.12);
        }
        
        .send {
            background: var(--color-primary);
            color: #fff;
            border: none;
            border-radius: 24px;
            padding: 10px 16px;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.2s ease;
        }
        
        .send:hover {
            background: var(--color-primary-hover);
        }
        
        .card {
            background: #fff;
            border: 1px solid var(--color-border);
            border-radius: 12px;
            padding: 12px;
            margin: 8px 0;
        }
        
        .row {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }
        
        .tag {
            background: #e7f5fa;
            color: #11667e;
            border: 1px solid #cfeaf3;
            border-radius: 14px;
            padding: 4px 8px;
            font-size: 12px;
        }
        
        .match-score {
            background: #ff6b35;
            color: white;
        }
        
        .book-rating {
            background: #ffd93d;
            color: #8b4513;
        }
        
        .prof-contact {
            background: #6bcf7f;
            color: white;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="chat-card">
            <div class="header">
                <div class="bot-avatar">ü§ñ</div>
                <div>
                    <h1 class="title">Compiler - the friend of all</h1>
                    <p class="subtitle">AI Study Assistant for SRM University</p>
                </div>
            </div>
            <div id="messages" class="messages"></div>
            <div class="quick">
                <button class="qbtn" data-q="Find me study partners for my subjects">Find Study Partners</button>
                <button class="qbtn" data-q="Recommend books for my courses">Book Recommendations</button>
                <button class="qbtn" data-q="Which professors can help with my subjects?">Professor Help</button>
                <button class="qbtn" data-q="What are the library hours during exams?">Library Schedule</button>
                <button class="qbtn" data-q="Match me based on my strengths and weaknesses">Smart Matchmaking</button>
            </div>
            <div class="input">
                <input id="chatInput" class="textbox" placeholder="Ask Compiler anything about your studies...">
                <button id="sendBtn" class="send">Send</button>
            </div>
        </div>
    </div>
    <script src="chatbot.js"></script>
</body>
</html>

// FILE 2: chatbot.js (Add this file to your project root)
// Compiler - the friend of all (Frontend)
// Real AI via /api/chat (Node backend) or smart rule-based fallback

(function() {
    const el = (id) => document.getElementById(id);
    const messages = el('messages');
    const sendBtn = el('sendBtn');
    const input = el('chatInput');
    
    // Get current user from localStorage
    const savedUser = localStorage.getItem('studyBuddy_user');
    const currentUser = savedUser ? JSON.parse(savedUser) : null;

    // Compiler's intro message
    const intro = "Hi! üêæ I'm Compiler - your SRM study buddy! I've got a nose for answers and make learning paws-itively smarter, stress-free, and fun! üê∂üí°";
    addBot(intro + "<br><br>I can help with:<br>- üìö Book recommendations<br>- üë• Smart study partner matching<br>- üë®‚Äçüè´ Professor contacts<br>- üìÖ Library schedules<br>- üéØ Personalized matchmaking based on your strengths/weaknesses");

    // Quick button handlers
    document.addEventListener('click', (e) => {
        const btn = e.target.closest('.qbtn');
        if (!btn) return;
        input.value = btn.getAttribute('data-q') || '';
        send();
    });

    // Send button and Enter key handlers
    sendBtn.addEventListener('click', send);
    input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            send();
        }
    });

    function addUser(text) {
        append('user', text);
    }

    function addBot(html) {
        append('bot', html);
    }

    function append(who, html) {
        const wrap = document.createElement('div');
        wrap.className = 'msg ' + (who === 'bot' ? 'bot' : 'user');
        const bubble = document.createElement('div');
        bubble.className = 'bubble';
        bubble.innerHTML = html;
        wrap.appendChild(bubble);
        messages.appendChild(wrap);
        messages.scrollTop = messages.scrollHeight;
    }

    function showTyping() {
        const w = document.createElement('div');
        w.className = 'msg bot';
        w.id = 'typing';
        w.innerHTML = '<div class="typing"><span>ü§ñ</span><div class="dots"><div class="dot"></div><div class="dot"></div><div class="dot"></div></div></div>';
        messages.appendChild(w);
        messages.scrollTop = messages.scrollHeight;
    }

    function hideTyping() {
        const n = document.getElementById('typing');
        if (n) n.remove();
    }

    async function send() {
        const text = (input.value || '').trim();
        if (!text) return;
        
        addUser(text);
        input.value = '';
        showTyping();

        try {
            // Try real backend first
            const res = await fetch('/api/chat', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ message: text, user: currentUser })
            });
            
            if (res.ok) {
                const data = await res.json();
                hideTyping();
                addBot(sanitize(data.reply || ''));
                return;
            }
            
            // Fallback to local logic
            const reply = localFallback(text, currentUser);
            hideTyping();
            addBot(reply);
        } catch (e) {
            const reply = localFallback(text, currentUser);
            hideTyping();
            addBot(reply);
        }
    }

    // Local smart fallback with enhanced matchmaking
    function localFallback(message, user) {
        const m = (message || '').toLowerCase();
        
        if (!user) {
            return "Please create your profile first so I can personalize answers. Click 'Get Started' on the homepage.";
        }

        if (matchAny(m, ['partner', 'match', 'group study', 'study buddy', 'smart matchmaking'])) {
            return renderMatches(user);
        }
        
        if (matchAny(m, ['book', 'recommend', 'textbook', 'reading'])) {
            return renderBooks(user);
        }
        
        if (matchAny(m, ['professor', 'faculty', 'teacher'])) {
            return renderProfs(user);
        }
        
        if (matchAny(m, ['library', 'schedule', 'hour', 'timing', 'exam'])) {
            return renderSchedule(m.includes('exam'));
        }

        return "I can help with study partners, books, professors, and schedules. Try: 'Find me study partners for my subjects' or 'Match me based on my strengths'.";
    }

    function matchAny(text, arr) {
        return arr.some(k => text.includes(k));
    }

    // Enhanced demo datasets with more detailed information
    const demoStudents = [
        {
            id: 1,
            name: 'Arjun Sharma',
            year: 2,
            department: 'Computer Science Engineering',
            subjects: ['Data Structures', 'Database Management', 'Operating Systems'],
            preferred_times: ['Evening', 'Night'],
            study_style: 'Group',
            avatar: 'üë®‚Äçüíª',
            interests: ['AI', 'CP', 'Web Development'],
            goals: ['project', 'placement'],
            strengths: ['coding', 'problem solving', 'algorithms'],
            weaknesses: ['math', 'theory'],
            availability: ['night', 'weekend'],
            method: ['online', 'offline']
        },
        {
            id: 2,
            name: 'Priya Reddy',
            year: 2,
            department: 'Electronics & Communication',
            subjects: ['Digital Signal Processing', 'Control Systems', 'Mathematics II'],
            preferred_times: ['Morning', 'Afternoon'],
            study_style: 'Group',
            avatar: 'üë©‚Äçüî¨',
            interests: ['robotics', 'IoT', 'signal processing'],
            goals: ['exam', 'research'],
            strengths: ['math', 'analytical thinking', 'circuits'],
            weaknesses: ['coding', 'programming'],
            availability: ['morning', 'afternoon'],
            method: ['offline']
        },
        {
            id: 3,
            name: 'Karthik Menon',
            year: 3,
            department: 'Mechanical Engineering',
            subjects: ['Thermodynamics', 'Fluid Mechanics', 'Machine Design'],
            preferred_times: ['Afternoon', 'Evening'],
            study_style: 'Group',
            avatar: 'üë®‚Äçüîß',
            interests: ['design', 'automation', 'CAD'],
            goals: ['project', 'internship'],
            strengths: ['mechanics', 'design thinking', 'practical work'],
            weaknesses: ['theory', 'mathematics'],
            availability: ['evening', 'weekend'],
            method: ['offline']
        },
        {
            id: 4,
            name: 'Ananya Patel',
            year: 1,
            department: 'Computer Science Engineering',
            subjects: ['Programming Fundamentals', 'Mathematics I', 'Physics'],
            preferred_times: ['Morning', 'Evening'],
            study_style: 'Individual',
            avatar: 'üë©‚Äçüíª',
            interests: ['programming', 'gaming', 'music'],
            goals: ['foundation', 'learning'],
            strengths: ['creativity', 'adaptability'],
            weaknesses: ['time management', 'focus'],
            availability: ['morning', 'evening'],
            method: ['online']
        }
    ];

    const demoBooks = [
        {
            title: 'Introduction to Algorithms',
            author: 'CLRS',
            subject: 'Data Structures',
            dept: 'Computer Science Engineering',
            years: [2, 3],
            rating: 4.9,
            availability: 'Library, Online',
            description: 'Comprehensive guide to algorithms and data structures'
        },
        {
            title: 'Database System Concepts',
            author: 'Silberschatz et al.',
            subject: 'Database Management',
            dept: 'Computer Science Engineering',
            years: [2, 3],
            rating: 4.7,
            availability: 'Library, Online',
            description: 'Complete database theory and practical implementation'
        },
        {
            title: 'Engineering Mathematics',
            author: 'B.S. Grewal',
            subject: 'Mathematics II',
            dept: 'All Engineering',
            years: [1, 2],
            rating: 4.5,
            availability: 'Library',
            description: 'Essential mathematics for engineering students'
        },
        {
            title: 'Digital Signal Processing',
            author: 'Oppenheim & Schafer',
            subject: 'Digital Signal Processing',
            dept: 'Electronics & Communication',
            years: [2, 3],
            rating: 4.8,
            availability: 'Library',
            description: 'Comprehensive DSP theory and applications'
        }
    ];

    const demoProfs = [
        {
            name: 'Dr. Rajesh Kumar',
            dept: 'Computer Science Engineering',
            spec: ['Data Structures', 'Algorithms', 'DBMS'],
            hours: 'Mon-Fri 2-4 PM',
            room: 'Block A, Room 301',
            contact: 'rajesh.kumar@srmist.edu.in',
            rating: 4.5,
            expertise: 'Advanced algorithms, competitive programming'
        },
        {
            name: 'Prof. Meena Sharma',
            dept: 'Mathematics',
            spec: ['Engineering Mathematics', 'Linear Algebra'],
            hours: 'Tue-Thu 10-12 PM',
            room: 'Block B, Room 205',
            contact: 'meena.sharma@srmist.edu.in',
            rating: 4.8,
            expertise: 'Mathematical modeling, statistics'
        },
        {
            name: 'Dr. Amit Patel',
            dept: 'Electronics & Communication',
            spec: ['Digital Signal Processing', 'Control Systems'],
            hours: 'Wed-Fri 3-5 PM',
            room: 'Block C, Room 401',
            contact: 'amit.patel@srmist.edu.in',
            rating: 4.6,
            expertise: 'Signal processing, embedded systems'
        }
    ];

    const scheduleNormal = {
        library: { weekdays: '8:00 AM - 9:00 PM', weekends: '9:00 AM - 6:00 PM' },
        studyrooms: { availability: '9:00 AM - 7:00 PM', booking: 'Visit library reception' },
        faculty: { general: '9:00 AM - 5:00 PM', doubt: '2:00 PM - 4:00 PM daily' }
    };

    const scheduleExam = {
        library: { weekdays: '7:00 AM - 11:00 PM', weekends: '7:00 AM - 11:00 PM' },
        studyrooms: { availability: '7:00 AM - 10:00 PM', booking: '24-hour advance booking' }
    };

    function renderMatches(user) {
        const list = demoStudents
            .filter(s => s.id !== user.id)
            .map(s => ({ ...s, score: compat(user, s) }))
            .filter(s => s.score > 30)
            .sort((a, b) => b.score - a.score)
            .slice(0, 3);

        if (list.length === 0) {
            return "No high-compatibility partners found now. Try widening your subjects or study times.";
        }

        let html = "<strong>üéØ Top study partner matches</strong>";
        list.forEach(s => {
            html += card(`
                <div class="row">
                    <span class="tag match-score">${s.score}% match</span>
                    <span class="tag">${s.department}</span>
                    <span class="tag">${s.year}${ord(s.year)} Yr</span>
                </div>
                <div class="row"><span>${s.avatar} <strong>${s.name}</strong></span></div>
                <div>Subjects: ${s.subjects.slice(0, 2).join(', ')}</div>
                <div>Available: ${s.preferred_times.join(', ')}</div>
                <div>Strengths: ${s.strengths.slice(0, 2).join(', ')}</div>
                <div>Goals: ${s.goals.join(', ')}</div>
            `);
        });
        html += "<br><em>These students share your subjects, preferences, and complement your strengths/weaknesses.</em>";
        return html;
    }

    function renderBooks(user) {
        const books = demoBooks.filter(b => {
            return (user.subjects || []).some(s => b.subject.includes(s) || s.includes(b.subject)) ||
                   b.dept === user.department || (b.years || []).includes(user.year);
        }).slice(0, 3);

        if (books.length === 0) {
            return "No exact books found. Try asking about a specific subject, e.g., 'books for DBMS'.";
        }

        let html = "<strong>üìö Recommended books</strong>";
        books.forEach(b => {
            html += card(`
                <div><strong>${b.title}</strong></div>
                <div>by ${b.author}</div>
                <div class="row">
                    <span class="tag">${b.subject}</span>
                    <span class="tag book-rating">‚≠ê ${b.rating}/5</span>
                    <span class="tag">${b.availability}</span>
                </div>
                <div><em>${b.description}</em></div>
            `);
        });
        return html;
    }

    function renderProfs(user) {
        const profs = demoProfs.filter(p => {
            return p.dept === user.department || p.spec.some(sp => (user.subjects || []).some(s => sp.includes(s) || s.includes(sp)));
        }).slice(0, 2);

        if (profs.length === 0) {
            return "No matching professors found. Try department office hours or contact your academic advisor.";
        }

        let html = "<strong>üë®‚Äçüè´ Professors who can help</strong>";
        profs.forEach(p => {
            html += card(`
                <div><strong>${p.name}</strong> ‚Ä¢ ${p.dept} ‚Ä¢ ‚≠ê ${p.rating}/5</div>
                <div>Office Hours: ${p.hours} ‚Ä¢ Room: ${p.room}</div>
                <div>Contact: ${p.contact}</div>
                <div>Specializes in: ${p.spec.join(', ')}</div>
                <div>Expertise: ${p.expertise}</div>
            `);
        });
        return html;
    }

    function renderSchedule(isExam) {
        const sc = isExam ? scheduleExam : scheduleNormal;
        return card(`
            <div><strong>üìÖ ${isExam ? 'Exam Time' : 'Normal'} Schedule</strong></div>
            <div>üìö Library ‚Äî Weekdays: ${sc.library.weekdays} ‚Ä¢ Weekends: ${sc.library.weekends}</div>
            <div>üìñ Study Rooms ‚Äî ${sc.studyrooms.availability} ‚Ä¢ ${sc.studyrooms.booking}</div>
            ${!isExam ? `<div>üë®‚Äçüè´ Faculty ‚Äî ${sc.faculty.general} ‚Ä¢ Doubt: ${sc.faculty.doubt}</div>` : ''}
        `);
    }

    // Enhanced compatibility algorithm with extended attributes
    function compat(a, b) {
        let score = 0;
        const inter = (arr1 = [], arr2 = []) => arr1.filter(x => arr2.includes(x));
        const frac = (n, d) => d > 0 ? n / d : 0;

        // Subjects (35% weight)
        const cs = inter(a.subjects || [], b.subjects || []).length;
        score += frac(cs, Math.max((a.subjects || []).length, (b.subjects || []).length)) * 35;

        // Study times (20% weight)
        const ct = inter(a.preferred_times || [], b.preferred_times || []).length;
        score += frac(ct, Math.max((a.preferred_times || []).length, (b.preferred_times || []).length)) * 20;

        // Department/Year (10% weight)
        if (a.department === b.department) score += 7;
        if (a.year === b.year) score += 3;

        // Study style (10% weight)
        if (a.study_style === b.study_style || a.study_style === 'Both' || b.study_style === 'Both') score += 10;

        // Interests/Goals (15% weight)
        const ci = inter(a.interests || [], b.interests || []).length;
        score += Math.min(15, ci * 7.5);
        const cg = inter(a.goals || [], b.goals || []).length;
        score += Math.min(15, cg * 7.5);

        // Availability/Method (10% weight)
        const ca = inter(a.availability || [], b.availability || []).length;
        const cm = inter(a.method || [], b.method || []).length;
        score += Math.min(10, ca * 5 + cm * 5);

        return Math.round(Math.min(score, 100));
    }

    function ord(n) {
        const s = ['st', 'nd', 'rd', 'th'];
        const v = n % 100;
        return s[(v - 20) % 10] || s[v] || s[0];
    }

    function card(inner) {
        return `<div class="card">${inner}</div>`;
    }

    function sanitize(html) {
        return html; // Kept simple; structured from backend
    }
})();

// FILE 3: server/chatbot-server.js (Node.js backend - optional but recommended)
const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');
const app = express();

app.use(cors());
app.use(express.json({ limit: '1mb' }));

const PORT = process.env.PORT || 8787;

app.post('/api/chat', async (req, res) => {
    const { message, user } = req.body || {};
    try {
        const reply = await routeAI(message, user);
        res.json({ reply });
    } catch (e) {
        console.error(e);
        res.status(200).json({ reply: fallback(message, user) });
    }
});

async function routeAI(message, user) {
    if (process.env.GROQ_API_KEY) return groq(message, user);
    if (process.env.OPENAI_API_KEY) return openai(message, user);
    if (process.env.HUGGINGFACE_API_KEY) return hf(message, user);
    return fallback(message, user);
}

function buildSystemPrompt(user) {
    return `
You are Compiler - the friend of all, an AI study assistant for SRM University.
Capabilities:
- Smart matchmaking using subjects, year, department, study style, interests, goals, availability, method, strengths/weaknesses
- Book recommendations for courses
- Professor contacts and office hours recommendations
- Library/facility schedules (normal/exam)
- Personalized advice based on user's academic profile

Speak concisely, add short emojis where helpful, and provide actionable advice.
Current user profile (JSON): ${JSON.stringify(user || {}, null, 2)}
    `.trim();
}

function buildUserPrompt(message) {
    return `User says: ${message}`;
}

async function groq(message, user) {
    const body = {
        messages: [
            { role: 'system', content: buildSystemPrompt(user) },
            { role: 'user', content: buildUserPrompt(message) }
        ],
        model: 'llama3-8b-8192',
        temperature: 0.5,
        max_tokens: 600
    };
    
    const r = await fetch('https://api.groq.com/openai/v1/chat/completions', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${process.env.GROQ_API_KEY}`
        },
        body: JSON.stringify(body)
    });
    
    const j = await r.json();
    return j.choices?.[0]?.message?.content?.trim() || fallback(message, user);
}

async function openai(message, user) {
    const body = {
        model: 'gpt-4o-mini',
        messages: [
            { role: 'system', content: buildSystemPrompt(user) },
            { role: 'user', content: buildUserPrompt(message) }
        ],
        temperature: 0.5,
        max_tokens: 600
    };
    
    const r = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
        },
        body: JSON.stringify(body)
    });
    
    const j = await r.json();
    return j.choices?.[0]?.message?.content?.trim() || fallback(message, user);
}

async function hf(message, user) {
    const input = `${buildSystemPrompt(user)}\n\n${buildUserPrompt(message)}`;
    
    const r = await fetch('https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.2', {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${process.env.HUGGINGFACE_API_KEY}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            inputs: input,
            parameters: { max_new_tokens: 500, temperature: 0.5 }
        })
    });
    
    const j = await r.json();
    const text = Array.isArray(j) ? j[0]?.generated_text : (j?.generated_text || JSON.stringify(j));
    return (text || '').slice(0, 3000) || fallback(message, user);
}

// Deterministic fallback (simple guidance if no API keys)
function fallback(message, user) {
    const m = (message || '').toLowerCase();
    
    if (!user) {
        return "Please create your StudyBuddy profile first for personalized answers.";
    }
    
    if (m.includes('partner') || m.includes('match') || m.includes('group')) {
        return "üéØ I'll match you by shared subjects, times, and goals. Try asking: 'match me for Data Structures at night' or 'find partners with similar strengths'.";
    }
    
    if (m.includes('book') || m.includes('recommend') || m.includes('textbook')) {
        return "üìö I recommend CLRS for Data Structures, DBMS by Silberschatz for databases, and Grewal for Engineering Math. Ask for specific subjects!";
    }
    
    if (m.includes('professor') || m.includes('faculty') || m.includes('teacher')) {
        return "üë®‚Äçüè´ Try Dr. Rajesh (CSE, DS/Algo), Prof. Meena (Maths), Dr. Amit (ECE, DSP). Office hours vary by day.";
    }
    
    if (m.includes('library') || m.includes('schedule') || m.includes('exam')) {
        return "üìÖ Library: Weekdays 8 AM‚Äì9 PM (normal), extended hours in exams. Study rooms by booking.";
    }
    
    return "I can help with study partners, books, professors, and schedules. Ask me about any of these!";
}

app.listen(PORT, () => console.log(`Compiler backend running on http://localhost:${PORT}`));

// FILE 4: server/package.json (For Node.js backend)
{
  "name": "compiler-chatbot-server",
  "version": "1.0.0",
  "type": "commonjs",
  "main": "chatbot-server.js",
  "scripts": {
    "start": "node chatbot-server.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.19.2",
    "node-fetch": "^2.7.0"
  }
}

// ============================================================================
// INTEGRATION INSTRUCTIONS
// ============================================================================

// STEP 1: Add chatbot.html and chatbot.js to your project root
// STEP 2: Optional - Add server folder for real AI backend
// STEP 3: Update your existing onboarding.js to open chatbot after profile creation

// Add this to your onboarding.js after profile creation:
// try { window.open('chatbot.html', '_blank'); } catch(e) {}

// STEP 4: For real AI backend (optional):
// 1. cd server
// 2. npm install
// 3. Set environment variable: GROQ_API_KEY=your_key (free tier available)
// 4. npm start

// STEP 5: Access chatbot at: http://localhost:8000/chatbot.html

// ============================================================================
// FEATURES IMPLEMENTED
// ============================================================================

// ‚úÖ Smart Matchmaking Algorithm
// - Collects: courses, strengths/weaknesses, interests, goals, availability, method
// - Uses AI algorithm to recommend best matches
// - Compatibility scoring based on multiple factors

// ‚úÖ Book Recommendations
// - Subject-based recommendations
// - Department-specific books
// - Rating and availability info

// ‚úÖ Professor Contacts
// - Department-specific professors
// - Office hours and contact info
// - Expertise areas

// ‚úÖ Schedule Information
// - Library hours (normal/exam)
// - Study room availability
// - Faculty office hours

// ‚úÖ Real AI Backend (Optional)
// - Supports Groq (free), OpenAI, HuggingFace
// - Fallback to smart rule-based responses
// - Personalized responses based on user profile

// ‚úÖ Enhanced UI/UX
// - Modern chat interface
// - Quick action buttons
// - Typing indicators
// - Responsive design

// ============================================================================
